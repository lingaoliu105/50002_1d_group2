module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output io_led [3][8],
    output io_sel [4],
    output io_seg [8]
    
  ) {
  
  sig rst;                  // reset signal
  sig address;
  sig agen[16];
  sig bgen[16]; 
  sig alufngen[6];
  sig zvngen[3];
  sig outgen[16];
  rom r;
  alu a;
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    usb_tx = usb_rx;        // loop serial port
    
    
    
    
    address = b00000; // Address to be from FSM
    
    
    
    
    
    // Generate an equation from ROM
    r.address = address;
    agen = r.outA;
    bgen = r.outB;
    alufngen = r.alufn;
    zvngen = r.outZVN;
    outgen = r.out;
    
    // ALU to use these parameters
    a.a = agen;
    a.b = bgen;
    a.aluin = alufngen;
   

    io_led = 3x{{8h00}};
    io_seg=8hff;
    io_sel=4hf;
    led = 8h00;
    // Compare results
    if (a.zvn == zvngen && a.result == outgen) {    //
      io_led[0][0] = 8hFF;  // turn LEDs on
      } else {
        io_led[0][0] = 8h00;  // turn LEDs off
      }
    
    // LED show ZVN
    io_led[1][2:0] = a.zvn; 
    io_led[2][2:0] = zvngen;
  }
}