module alu (
    input a[16],
    input b[16],
    input alufn[6],
    output zvn[3],
    output out[16]
  ) {
  adder_unit adderUnit;
  compare_unit compareUnit;
  boolean_unit booleanUnit;
  shifter_unit shifterUnit;
  
  always {
    adderUnit.alufn = alufn;
    adderUnit.a = a;
    adderUnit.b = b;
    
    zvn[2] = adderUnit.z;
    zvn[1] = adderUnit.v;
    zvn[0] = adderUnit.n;
    
    compareUnit.alufn = alufn;
    compareUnit.z = adderUnit.z;
    compareUnit.v = adderUnit.v;
    compareUnit.n = adderUnit.n;
    
    booleanUnit.a = a;
    booleanUnit.b = b;
    booleanUnit.alufn = alufn;
    
    shifterUnit.a = a;
    shifterUnit.b = b;
    shifterUnit.alufn = alufn;
    
    case(alufn[5:4]) {
      b00 : out = adderUnit.out;
      b01 : out = booleanUnit.out;
      b10 : out = shifterUnit.out;
      b11 : out = compareUnit.out;
      
      default: out = 16b0;
      }
    
    if (alufn == b000010){
      out = a*b; // fast multiplier hack, so no need to implement a separate multiplier. reference from 
                //https://github.com/natalieagus/SampleAlchitryProjects/blob/master/BetaComponents/source/alu.luc
                //thank you prof
    }
  }
}
