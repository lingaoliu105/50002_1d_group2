module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output io_led [3][8],
    output io_sel [4],
    output io_seg [8]
    
  ) {
  
  sig rst;                  // reset signal
  sig address;
  sig agen[16];
  sig bgen[16]; 
  sig alufngen[6];
  sig zvngen[3];
  sig outgen[16];
  rom r;
  alu a;
  
  //set button trigger
  button_conditioner buttonCond(.clk(clk));
  edge_detector edgeDetect(#RISE(1), #FALL(0),.clk(clk));
  
  counter slowclock(#SIZE(1),#DIV(26),.clk(clk),.rst(rst));
  fsm fsm_t(.clk(slowclock.value),.rst(rst))={S0,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,S13,S14,S15,S16};
  fsm pause(.clk(clk),.rst(rst))={S0,S1}; //fsm to control pausing. S0 means running, S1 means pausing
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    usb_tx = usb_rx;        // loop serial port
    
    //button connected to trigger pausing
    buttonCond.in=io_button[1]; //use the central button to control
    edgeDetect.in=buttonCond.out;
    
    // The very first default address
    address = b00000; 
    
    // Generate an equation from ROM
    r.address = address;
    agen = r.outA;
    bgen = r.outB;
    alufngen = r.alufn;
    zvngen = r.outZVN;
    outgen = r.out;
    
    // ALU to use these parameters
    a.a = agen;
    a.b = bgen;
    a.alufn = alufngen;
     
    // Please remain unchanged:
    io_led = 3x{{8h00}};
    io_seg=8hff;
    io_sel=4hf;
    led = 8h00;
    
    //controlling pausing
    case (pause.q){
      pause.S0:
        if (edgeDetect.out==1){
          pause.d=pause.S1;
        }
      pause.S1:
        if (edgeDetect.out==1){
          pause.d=pause.S0;
        }
    }
    
    // FSM running
      case (fsm_t.q){
        fsm_t.S0: //each state represents an address in the rom
        r.address=4b0;
            if (pause.q==pause.S0){ //continue only when pause is S0
        fsm_t.d=fsm_t.S1;} //automatically go to next state
  
        fsm_t.S1:
        r.address=4b1;
            if (pause.q==pause.S0){ 
        fsm_t.d=fsm_t.S2;}
  
        fsm_t.S2:
        r.address=4b10;
            if (pause.q==pause.S0){ 
        fsm_t.d=fsm_t.S3;  } 
  
        fsm_t.S3:
        r.address=4b11;
            if (pause.q==pause.S0){ 
        fsm_t.d=fsm_t.S4;}
  
        fsm_t.S4:
        r.address=4b100;
            if (pause.q==pause.S0){ 
        fsm_t.d=fsm_t.S5;}
  
        fsm_t.S5:
        r.address=4b101;
            if (pause.q==pause.S0){ 
        fsm_t.d=fsm_t.S6;}
  
        fsm_t.S6:
        r.address=4b110;
            if (pause.q==pause.S0){ 
        fsm_t.d=fsm_t.S7;}
  
        fsm_t.S7:
        r.address=4b111;
            if (pause.q==pause.S0){ 
        fsm_t.d=fsm_t.S8;}
  
        fsm_t.S8:
        r.address=4b1000;
            if (pause.q==pause.S0){ 
        fsm_t.d=fsm_t.S9;}
  
        fsm_t.S9:
        r.address=4b1001;
            if (pause.q==pause.S0){ 
        fsm_t.d=fsm_t.S10;}
  
        fsm_t.S10:
        r.address=4b1010;
            if (pause.q==pause.S0){ 
        fsm_t.d=fsm_t.S11;}
  
        fsm_t.S11:
        r.address=4b1011;
            if (pause.q==pause.S0){ 
        fsm_t.d=fsm_t.S12;}
  
        fsm_t.S12:
        r.address=4b1100;
            if (pause.q==pause.S0){ 
        fsm_t.d=fsm_t.S13;}
  
        fsm_t.S13:
        r.address=4b1101;
            if (pause.q==pause.S0){ 
        fsm_t.d=fsm_t.S14;}
  
        fsm_t.S14:
        r.address=4b1110;
            if (pause.q==pause.S0){ 
        fsm_t.d=fsm_t.S15;}
  
        fsm_t.S15:
        r.address=4b1111;
            if (pause.q==pause.S0){ 
        fsm_t.d=fsm_t.S0;} //after reaching last state, go back to initial state
        }
    
    
    // Compare results
    
    if (alufngen == 000000 || alufngen == 000001 || alufngen[5:4] == 11) { //if the operation involves zvn, we need to check both output and zvn
      if (a.out == outgen && a.zvn == zvngen ) {
      io_led[0][0] = 8hFF;  // turn LEDs on, indicating result is correct
      } else {
        io_led[0][0] = 8h00;  // turn LEDs off, indicating result incorrect
      }
    } else { //if zvn is not involved, we do not check it
      if (a.out == outgen) {
      io_led[0][0] = 8hFF;  // turn LEDs on
      } else {
        io_led[0][0] = 8h00;  // turn LEDs off
      }
    }
    
    
    //led showing index of test case in binary
    io_led[2][7:4]=r.addr;
  }
}